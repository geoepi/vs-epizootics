---
title: "Overview"
format:
  html: 
    df-print: kable
    code-fold: show
    code-summary: "Hide code"
    code-overflow: wrap
    toc-title: Page Contents
    toc: true
    toc-depth: 2
    toc-location: right
    number-sections: false
    html-math-method: katex
    smooth-scroll: true
editor: source
editor_options: 
  chunk_output_type: console
---

## Load Libraries
```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(tidyterra)
library(raster)
library(ggtree)
library(terra)
library(raptr)
library(rgeos)
library(pals)
library(here)

select <- dplyr::select

library(INLA)
#install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
```

## Custom Functions
```{r message=FALSE, warning=FALSE}
set.seed(1976)

source(here("./R/utilities.R"))
source_dir("./R")
```


## Get Boundaries
```{r message=FALSE, warning=FALSE}
domain <- vect(here("assets/domain"))

obs_stack.r <- rast(
  list(
    rast(here("assets/rf_2014.tif")),
    rast(here("assets/rf_2015.tif"))
       )
)
```

## Simulate Outbreak  
  
### SEIR-Vector Dynamics  
```{r message=FALSE, warning=FALSE}
seir_vector_14 <- seirsei_ode(Nh = 4100, # number of livestock hosts
                           vect_mult = 250, # number of vectors per host
                           obs_bias = 0.10, # proportion observed/detected
                           targ_year = "2014" # to approximate dates 
                           )

sum(seir_vector_14$adj_inc)

plot_seirsei(seir_vector_14)
```


Repeat for 2015
```{r message=FALSE, warning=FALSE}
seir_vector_15 <- seirsei_ode(Nh = 5000, # number of livestock hosts
                           vect_mult = 250, # number of vectors per host
                           obs_bias = 0.10, # proportion observed/detected
                           targ_year = "2015" # to approximate dates 
                           )

sum(seir_vector_15$adj_inc)

plot_seirsei(seir_vector_15)
```

### Spatial Randomization 
```{r message=FALSE, warning=FALSE}
sample_2014 <- spatial_sample(inc_df = seir_vector_14, obs_rast = obs_stack.r[[1]])

sample_2015 <- spatial_sample(inc_df = seir_vector_15, obs_rast = obs_stack.r[[2]])
```

View 
```{r message=FALSE, warning=FALSE}
join_sims <- rbind(sample_2014, sample_2015)

plot_rast_panels(obs_stack.r, domain, join_sims, brewer.ylorbr(4))
```

## Spatial Triangulation  
```{r message=FALSE, warning=FALSE}
hull <- st_convex_hull(
  st_buffer(
    st_union(
      st_as_sf(domain)),
    100))

dom_bnds <- inla.sp2segment(as(hull, "Spatial"))

set.seed(1976)
mesh.dom <- inla.mesh.2d(boundary = dom_bnds, 
                        loc = join_sims[,c("x","y")],
                        cutoff = 20, 
                        max.edge = c(60, 300),
                        offset = c(100,250),
                        min.angle = 30) 

mesh.dom$n
plot_mesh(mesh.dom)
```

### Node Coordinates
```{r message=FALSE, warning=FALSE}
dd = as.data.frame(cbind(mesh.dom$loc[,1], 
                         mesh.dom$loc[,2]))

names(dd) = c("x", "y")

dd$set <- "node"

head(dd)
```

### Copy to Year
```{r message=FALSE, warning=FALSE}
seq_2014_dates <- seq(as.Date("2014-01-01"), as.Date("2014-12-31"), by = 1)

sample_2014 <- rbind(sample_2014, mutate(dd, 
                                         year = 2014,
                                         date = sample(seq_2014_dates, n(), replace = TRUE))) %>%
  mutate(
    pred_var = rnorm(n = n(), mean = 0, sd = 1),
    obs = ifelse(set == "node", 0, 1)
  )


seq_2015_dates <- seq(as.Date("2015-01-01"), as.Date("2015-12-31"), by = 1)

sample_2015 <- rbind(sample_2015, mutate(dd, 
                                         year = 2015,
                                         date = sample(seq_2015_dates, n(), replace = TRUE))) %>%
  mutate(
    pred_var = rnorm(n = n(), mean = 0.5, sd = 1),
    obs = ifelse(set == "node", 0, 1)
  )

head(sample_2015)
```


## Cluster Distance
```{r warning=FALSE}
# 2014
split_factor <- as.factor(sample_2014$set)

NN <- as.data.frame(
  spatstat.geom::nndist(sample_2014[,c("x","y")], by = split_factor, k = 1)
)["sim"]

sample_2014$NN <- round(NN$sim, 0)



# 2015
split_factor <- as.factor(sample_2015$set)

NN <- as.data.frame(
  spatstat.geom::nndist(sample_2015[,c("x","y")], by = split_factor, k = 1)
)["sim"]

sample_2015$NN <- round(NN$sim, 0)

range(sample_2015$NN)
```


### Combine Data
```{r message=FALSE, warning=FALSE}
combined_data = rbind(sample_2014, sample_2015)
```


## Phylodynamics
```{r message=FALSE, warning=FALSE}
vsv_tree = read.tree(here("assets/mcc.tre"))

phylodynamics <- phylodynamic_process(vsv_tree)

head(phylodynamics$dyn)

combined_data <- append_nearest_date(combined_data, phylodynamics$dyn, "Ne")

plot(phylodynamics$tree)

plot(phylodynamics$Ne)
```


## Exposure
```{r message=FALSE, warning=FALSE}
host_pop.r <- rast(here("assets/host_pop.tif"))

tessel_mesh <- vect(mesh_tessellation(mesh.dom))

crs(tessel_mesh) <- crs(domain)

tessel_mesh$host_pop <- extract(host_pop.r, tessel_mesh, fun="sum", na.rm=TRUE)[,"host_pop"]/10^3

host_pop <- as.data.frame(
  extract(tessel_mesh, combined_data[,c("x","y")])) %>% 
  distinct(id.y, .keep_all = TRUE) 

combined_data$host_pop <- host_pop$host_pop

range(combined_data$host_pop)
```

```{r message=FALSE, warning=FALSE}
plot_exposure_seq(mesh = mesh.dom, dd_nodes = dd, rast_data = host_pop.r, 
                  rast_scale = 10^3, xmin = -11500, xmax = -10500, ymin = 3500, ymax = 4500)
```

## Time Index
```{r message=FALSE, warning=FALSE}
combined_data$year_step <- as.integer(as.factor(combined_data$year))
combined_data$day_step <- as.integer(as.factor(combined_data$date))
```

## Split Predictor Variable
```{r message=FALSE, warning=FALSE}
combined_data <- combined_data %>%
  mutate(pred_var_14 = if_else(year == 2014, pred_var, NA),
         pred_var_15 = if_else(year == 2015, pred_var, NA))
```



## Projection  

### Random Field
```{r message=FALSE, warning=FALSE}
k = length(unique(combined_data$year_step))

locs = cbind(combined_data$x, combined_data$y)

A.pf = inla.spde.make.A(mesh.dom, 
                          alpha = 2,
                          loc=locs,
                          group = combined_data$time_step)

spde0 = inla.spde2.pcmatern(mesh.dom, alpha = 2,
                            prior.range=c(250, 0.01),  
                            prior.sigma=c(1, 0.01),
                            constr = TRUE)

Field.pf = inla.spde.make.index("Field.pf", 
                               spde0$n.spde,
                               n.group=k)
```


### Organize Data
```{r}
pf.lst = list(c(Field.pf, 
                list(intercept1 = 1)), 
                list(year_step1 = combined_data[,"year_step"])) 

pf.stk = inla.stack(data = list(Y = cbind(combined_data$obs, NA)),
                                A = list(A.pf, 1), 
                          effects = pf.lst,   
                              tag = "pf.0")

```

### Estimate
```{r message=FALSE, warning=FALSE}
A.est = inla.spde.make.A(mesh.dom, 
                         alpha = 2,
                         loc=locs,
                         group = combined_data$time_step)

Field.est = inla.spde.make.index("Field.est",
                                 spde0$n.spde,
                                 n.group=k)

est.lst = list(c(Field.est,
                 list(intercept2 = 1)), 
                 list(pred_var_14 = combined_data[,"pred_var_14"],
                      pred_var_15 = combined_data[,"pred_var_15"],
                      NN = combined_data[,"NN"],
                      Ne = combined_data[,"Ne"],
                      year_step1 = combined_data[,"year_step"],
                      day_step = combined_data[,"day_step"]))

est.stk = inla.stack(data = list(Y = cbind(NA, combined_data$obs),
                                 e = combined_data$host_pop),
                                 A = list(A.est, 1), 
                           effects = est.lst,   
                               tag = "est.0")



joint.stk = inla.stack(pf.stk, est.stk)
```

## Model Formula  

$$\begin{align}
   \text{log}(\Lambda_{st}) &= W_{st} \nonumber \\ \nonumber
    \quad \quad \Lambda_{st} &= \text{exp}\{\beta_{\Lambda} + \text{W}_{st}\}\\ \nonumber
    \text{W}_{st} &\overset{\textit{iid}}{\sim} \textit{N}(0, \text{Q}(\textit{r},\sigma)) \\ \nonumber
    \textit{r} &\sim \textit{Pr}(250, 0.01) \\ \nonumber
    \sigma &\sim \textit{Pr}(1, 0.01) \\ \nonumber
\end{align}$$ 


$$\begin{align}
   \text{Y}_{st}|\lambda_{st}  &\sim \text{Poisson}(\mu_{st})  \nonumber \\ \nonumber
   \mu_{st} &= \textit{E}_{\textit{st}}\lambda_{st} \\ \nonumber
   log(\mu_{\textit{st}}) &= log(\textit{E}_{\textit{st}}) + log(\lambda_{\textit{st}}) \\ \nonumber
   log(\lambda_{\textit{st}}) &=  \beta_0 + \sum_{b=1}^{B} \beta_bX_{bst} + \gamma_{clust} + \gamma_{river} + \gamma_{ne} + \alpha \text{W}_{st}  \\  \nonumber
   \beta_b &= (\beta_{eddi}, \beta_{wet}, \beta_{temp}, \beta_{seas}, \beta_{carb}, \beta_{shrb}, \beta_{elev}, \beta_{ndvi}) \\ \nonumber
   \beta_b &\sim \textit{N}(1, 0.001) \\ \nonumber
   \gamma_{clust}, \gamma_{river} &\sim \textit{Pr}(1, 0.01) \\ \nonumber
   \gamma_{ne} &\sim \textit{Pr}(3, 0.01) \\ \nonumber
\end{align}$$

```{r message=FALSE, warning=FALSE}
pcprior1 = list(prec = list(prior="pc.prec", param = c(1, 0.01))) 
hc1 = list(theta = list(prior = 'normal', param = c(0, 10)))
ctr.g = list(model = 'iid', hyper = hc1)

Formula.1 = Y ~ -1 + intercept1 + 
                     intercept2 +
          				f(Field.pf,
          				  model=spde0,
          				  group = Field.pf.group, 
                            control.group=ctr.g) +
                  f(Field.est,
                    copy = "Field.pf", 
          				  group = Field.est.group, 
                            fixed = FALSE,
                            hyper = hc1) + 
         				  f(NN,   
                    model="rw1", 
                    constr=TRUE,
         				    replicate = year_step1,
                    scale.model=TRUE,
         				    hyper=pcprior1) +
                  f(day_step, Ne,   
                    model="rw1", 
                    constr=TRUE,
                    scale.model=TRUE,
         				    hyper=pcprior1) +
                  pred_var_14 + pred_var_15 
```

# Run Model
```{r eval=FALSE, message=FALSE, warning=FALSE}
theta1 = c(3.091600, 6.136307, -2.297550, -1.228109, -2.166505, -1.035271)   


Model.demo <- inla(Formula.1, 
      				 num.threads = 12,
      				 data = inla.stack.data(joint.stk), 
      				 family = c("gaussian", "poisson"), 
      				 verbose = TRUE,
      				 E = inla.stack.data(joint.stk)$e,
      				 control.fixed = list(prec = 1, prec.intercept=1), 
      				 control.predictor = list(
      										A = inla.stack.A(joint.stk), 
      										compute = TRUE, 
      										link = 1), 
      				 control.mode = list(restart = TRUE, theta = theta1),
      				 control.inla = list(strategy="adaptive", 
      									 int.strategy = "eb"),
      				 control.compute=list(dic = FALSE, cpo = FALSE, waic = FALSE)) 

save(list=c("Model.demo"), file=here("assets/demo.RData"), version = 2)
```

Load previously run model  
```{r message=FALSE, warning=FALSE}
load(here("assets/demo.RData"))
```

## Create Grid
```{r message=FALSE, warning=FALSE}
blank.r <- obs_stack.r[[1]]
blank.r[!is.na(blank.r)] <- 0

grid_pnts <- as.points(blank.r)
names(grid_pnts) <- "cell_value"


grid_coords <- grid_pnts %>%
  geom() %>%
  as.data.frame() 

Ap = inla.spde.make.A(mesh.dom, 
                      loc = cbind(grid_coords[,"x"], 
                                  grid_coords[,"y"]))
```

## Cluster Distance
```{r message=FALSE, warning=FALSE, fig.height=5, fig.width=6}
plot_cluster(Model.demo)
```

## Linear Coefficients  
```{r message=FALSE, warning=FALSE, fig.height=6, fig.width=5}
plot_fixed_marginals(Model.demo, c("pred_var_14", "pred_var_15"))
```

## Phylodynamic Effect
```{r message=FALSE, warning=FALSE, fig.height=5, fig.width=6}
plot_phylodynamic(Model.demo, parameter = "day_step")
```

## Spatial Random Fields  
```{r message=FALSE, warning=FALSE, fig.height=6, fig.width=5}
mrf_pf <- cbind(Model.demo$summary.random$Field.pf$mean, 
                Field.pf$Field.pf.group)

mrf_pf_v <- list()
mrf_pf_v  <- split(mrf_pf[,1], mrf_pf[,2])

grid_pnts$pf_2014 <- drop(Ap %*% mrf_pf_v[[1]]) 
grid_pnts$pf_2015 <- drop(Ap %*% mrf_pf_v[[2]]) 

pf_14.r <- rasterize(grid_pnts, 
                    blank.r, 
                    "pf_2014",
                    background = NA)

pf_15.r <- rasterize(grid_pnts, 
                    blank.r, 
                    "pf_2015",
                    background = NA)

pf_stack.r <-list(pf_14.r, pf_15.r)


plot_rast_panels(pf_stack.r, domain, join_sims, rev(cubehelix(50)), center=TRUE)
```



